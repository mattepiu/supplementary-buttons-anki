#!/bin/bash
#
# Creates a zip package suitable for publication on AnkiWeb. When invoked
# without any arguments, this script will run all available unit tests first,
# and after their successful completion, create the package. To skip the unit
# test, any command-line argument will do, for example:
#
# $ ./zip_files_into_package override_unit_tests
#

set -o errexit
set -o nounset

FOLDER_NAME=power_format_pack

# needed for unit tests with nosetests
if [ -d "$FOLDER_NAME" ]; then
    case "${PYTHONPATH:=:}" in
        *"$FOLDER_NAME"*)
            echo "PYTHONPATH already contains the needed path..."
            ;;
        *)
            new_path="$(pwd)"/"$FOLDER_NAME"
            export PYTHONPATH="${PYTHONPATH}:$new_path"
            echo "Added '$new_path' to PYTHONPATH..."
            ;;
    esac
fi

# override unit testing
override_unit_tests="${1:-}"

check_return_value() {
    if [ "$1" -ne 0 ]; then
        echo "Command did not run succesfully. Please check. Exiting..."
        exit 1
    fi
}

if [[ ${override_unit_tests:-unset} != unset ]]; then
    echo "Not running unit tests..."
else
    # run tests before creating zip
    nosetests2 -x --rednose
    check_return_value $?
fi

# remove asserts from files
while read -r file; do
    sed -i.bak -r 's/assert isinstance/# assert isinstance/' "$file"
done < <(grep -l -F "assert isinstance" "$FOLDER_NAME"/*.py --no-messages)

# set ignore UserWarnings
sed -i.bak -r '
s/^# *warnings/warnings/
s/^# *import +warnings/import warnings/
' "$FOLDER_NAME"/extra_buttons.py

grep -P "^import\s+warnings$" "$FOLDER_NAME"/extra_buttons.py
check_return_value $?
grep -P "^warnings\.simplefilter" "$FOLDER_NAME"/extra_buttons.py
check_return_value $?

# create out file based on tags
tag=$(git describe HEAD --tags --abbrev=0)
out_file="power_format_pack_$tag.zip"
git archive --format zip --output "$out_file" "$tag"

# reinsert asserts and warnings comments
for file in "$FOLDER_NAME"/*.bak; do
    mv "$file" "${file%.*}"
done
